"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loginDeviceByIp = exports.loginDevice = exports.cloudLogin = void 0;
var axios_1 = __importDefault(require("axios"));
var https = __importStar(require("https"));
var uuid_1 = require("uuid");
var network_tools_1 = require("./network-tools");
var klap_transport_1 = require("./klap-transport");
var secure_passthrough_transport_1 = require("./secure-passthrough-transport");
var tplink_ca_cert_1 = __importDefault(require("./tplink-ca-cert"));
var tapo_utils_1 = require("./tapo-utils");
// another variant is https://n-euw1-wap-gw.tplinkcloud.com
var baseUrl = 'https://eu-wap.tplinkcloud.com/';
/**
 * also url may be one of that:
 * "http://use1-relay-dcipc.i.tplinknbu.com"
 * "http://aps1-relay-dcipc-beta.i.tplinknbu.com"
 * "http://euw1-relay-dcipc.i.tplinknbu.com"
 * "http://aps1-relay-dcipc-beta.i.tplinknbu.com"
 * "http://aps1-relay-dcipc.i.tplinknbu.com"
 * "http://aps1-relay-dcipc-beta.i.tplinknbu.com"
 */
var baseTapoCareUrl = 'https://euw1-app-tapo-care.i.tplinknbu.com';
var cloudLogin = function (email, password) {
    if (email === void 0) { email = process.env.TAPO_USERNAME || undefined; }
    if (password === void 0) { password = process.env.TAPO_PASSWORD || undefined; }
    return __awaiter(void 0, void 0, void 0, function () {
        var loginRequest, response, cloudToken, listDevices, listDevicesByType, tapoCareCloudVideos;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    loginRequest = {
                        "method": "login",
                        "params": {
                            "appType": "Tapo_Ios",
                            "cloudPassword": password,
                            "cloudUserName": email,
                            "terminalUUID": (0, uuid_1.v4)()
                        }
                    };
                    return [4 /*yield*/, (0, axios_1.default)({
                            method: 'post',
                            url: baseUrl,
                            data: loginRequest
                        })];
                case 1:
                    response = _a.sent();
                    (0, tapo_utils_1.checkError)(response.data);
                    cloudToken = response.data.result.token;
                    listDevices = function () { return __awaiter(void 0, void 0, void 0, function () {
                        var getDeviceRequest, response;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    getDeviceRequest = {
                                        "method": "getDeviceList",
                                    };
                                    return [4 /*yield*/, (0, axios_1.default)({
                                            method: 'post',
                                            url: baseUrl,
                                            data: getDeviceRequest,
                                            params: {
                                                token: cloudToken
                                            }
                                        })];
                                case 1:
                                    response = _a.sent();
                                    (0, tapo_utils_1.checkError)(response.data);
                                    return [2 /*return*/, Promise.all(response.data.result.deviceList.map(function (deviceInfo) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                                            return [2 /*return*/, (0, tapo_utils_1.augmentTapoDevice)(deviceInfo)];
                                        }); }); }))];
                            }
                        });
                    }); };
                    listDevicesByType = function (deviceType) { return __awaiter(void 0, void 0, void 0, function () {
                        var devices;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, listDevices()];
                                case 1:
                                    devices = _a.sent();
                                    return [2 /*return*/, devices.filter(function (d) { return d.deviceType === deviceType; })];
                            }
                        });
                    }); };
                    tapoCareCloudVideos = function (deviceId, order, page, pageSize, startTime, endTime) {
                        if (order === void 0) { order = 'desc'; }
                        if (page === void 0) { page = 0; }
                        if (pageSize === void 0) { pageSize = 20; }
                        if (startTime === void 0) { startTime = null; }
                        if (endTime === void 0) { endTime = null; }
                        return __awaiter(void 0, void 0, void 0, function () {
                            var response;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, tplinkCaAxios()({
                                            method: 'get',
                                            url: "".concat(baseTapoCareUrl, "/v1/videos"),
                                            params: {
                                                deviceId: deviceId,
                                                page: page,
                                                pageSize: pageSize,
                                                order: order,
                                                startTime: startTime,
                                                endTime: endTime,
                                            },
                                            headers: {
                                                'authorization': "ut|".concat(cloudToken),
                                            },
                                        })];
                                    case 1:
                                        response = _a.sent();
                                        checkTapoCareError(response);
                                        return [2 /*return*/, response.data];
                                }
                            });
                        });
                    };
                    return [2 /*return*/, {
                            listDevices: listDevices,
                            listDevicesByType: listDevicesByType,
                            tapoCareCloudVideos: tapoCareCloudVideos
                        }];
            }
        });
    });
};
exports.cloudLogin = cloudLogin;
var loginDevice = function (email, password, device) {
    if (email === void 0) { email = process.env.TAPO_USERNAME || undefined; }
    if (password === void 0) { password = process.env.TAPO_PASSWORD || undefined; }
    return __awaiter(void 0, void 0, void 0, function () {
        var localIp;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, network_tools_1.resolveMacToIp)(device.deviceMac)];
                case 1:
                    localIp = _a.sent();
                    if (!localIp) {
                        throw new Error("Local IP of device with Mac address ".concat(device.deviceMac, " not found."));
                    }
                    return [2 /*return*/, (0, exports.loginDeviceByIp)(email, password, localIp)];
            }
        });
    });
};
exports.loginDevice = loginDevice;
var loginDeviceByIp = function (email, password, deviceIp) {
    if (email === void 0) { email = process.env.TAPO_USERNAME || undefined; }
    if (password === void 0) { password = process.env.TAPO_PASSWORD || undefined; }
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            // Attempts to login using newer klap protocol first, then fallback to legacy secure pass through protocol
            return [2 /*return*/, (0, klap_transport_1.loginDeviceByIp)(email, password, deviceIp)
                    .catch(function (error) {
                    console.warn("Failed to login due to ".concat(error, "\nFalling back to legacy login method"));
                    return (0, secure_passthrough_transport_1.loginDeviceByIp)(email, password, deviceIp);
                })];
        });
    });
};
exports.loginDeviceByIp = loginDeviceByIp;
var tplinkCaAxios = function () {
    var httpsAgent = new https.Agent({
        rejectUnauthorized: true,
        ca: tplink_ca_cert_1.default,
    });
    return axios_1.default.create({ httpsAgent: httpsAgent });
};
var checkTapoCareError = function (responseData) {
    var errorCode = responseData === null || responseData === void 0 ? void 0 : responseData.code;
    if (errorCode) {
        throw new Error("Unrecognised Error Code: ".concat(errorCode, " (").concat(responseData["message"], ")"));
    }
};
//# sourceMappingURL=api.js.map
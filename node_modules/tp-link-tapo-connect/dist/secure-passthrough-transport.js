"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.securePassthrough = exports.loginDeviceByIp = void 0;
var axios_1 = __importDefault(require("axios"));
var tplink_cipher_1 = require("./tplink-cipher");
var tapo_device_1 = require("./tapo-device");
var tapo_utils_1 = require("./tapo-utils");
var loginDeviceByIp = function (email, password, deviceIp) { return __awaiter(void 0, void 0, void 0, function () {
    var deviceKey, loginDeviceRequest, loginDeviceResponse, send;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, handshake(deviceIp)];
            case 1:
                deviceKey = _a.sent();
                loginDeviceRequest = {
                    "method": "login_device",
                    "params": {
                        "username": (0, tplink_cipher_1.base64Encode)((0, tplink_cipher_1.shaDigest)(email)),
                        "password": (0, tplink_cipher_1.base64Encode)(password)
                    },
                    "requestTimeMils": 0
                };
                return [4 /*yield*/, (0, exports.securePassthrough)(loginDeviceRequest, deviceKey)];
            case 2:
                loginDeviceResponse = _a.sent();
                deviceKey.token = loginDeviceResponse.token;
                send = function (request) { return (0, exports.securePassthrough)(request, deviceKey); };
                return [2 /*return*/, (0, tapo_device_1.TapoDevice)({
                        send: send
                    })];
        }
    });
}); };
exports.loginDeviceByIp = loginDeviceByIp;
var handshake = function (deviceIp) { return __awaiter(void 0, void 0, void 0, function () {
    var keyPair, handshakeRequest, response, setCookieHeader, sessionCookie, deviceKey;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, tplink_cipher_1.generateKeyPair)()];
            case 1:
                keyPair = _a.sent();
                handshakeRequest = {
                    method: "handshake",
                    params: {
                        "key": keyPair.publicKey
                    }
                };
                return [4 /*yield*/, (0, axios_1.default)({
                        method: 'post',
                        url: "http://".concat(deviceIp, "/app"),
                        data: handshakeRequest
                    })];
            case 2:
                response = _a.sent();
                (0, tapo_utils_1.checkError)(response.data);
                setCookieHeader = response.headers['set-cookie'][0];
                sessionCookie = setCookieHeader.substring(0, setCookieHeader.indexOf(';'));
                deviceKey = (0, tplink_cipher_1.readDeviceKey)(response.data.result.key, keyPair.privateKey);
                return [2 /*return*/, {
                        key: deviceKey.subarray(0, 16),
                        iv: deviceKey.subarray(16, 32),
                        deviceIp: deviceIp,
                        sessionCookie: sessionCookie
                    }];
        }
    });
}); };
var securePassthrough = function (deviceRequest, deviceKey) { return __awaiter(void 0, void 0, void 0, function () {
    var encryptedRequest, securePassthroughRequest, response, decryptedResponse;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                encryptedRequest = (0, tplink_cipher_1.encrypt)(deviceRequest, deviceKey);
                securePassthroughRequest = {
                    "method": "securePassthrough",
                    "params": {
                        "request": encryptedRequest,
                    }
                };
                return [4 /*yield*/, (0, axios_1.default)({
                        method: 'post',
                        url: "http://".concat(deviceKey.deviceIp, "/app?token=").concat(deviceKey.token),
                        data: securePassthroughRequest,
                        headers: {
                            "Cookie": deviceKey.sessionCookie
                        }
                    })];
            case 1:
                response = _a.sent();
                (0, tapo_utils_1.checkError)(response.data);
                decryptedResponse = (0, tplink_cipher_1.decrypt)(response.data.result.response, deviceKey);
                (0, tapo_utils_1.checkError)(decryptedResponse);
                return [2 /*return*/, decryptedResponse.result];
        }
    });
}); };
exports.securePassthrough = securePassthrough;
//# sourceMappingURL=secure-passthrough-transport.js.map